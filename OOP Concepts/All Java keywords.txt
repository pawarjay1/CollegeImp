**import**
import keyword is used to import the built-in and user-defined packages, class or interface in Java. 

**new** 
The new keyword is used to create an instance of a class, also known as an object.
 
The new keyword in Java is used to allocate memory for the object on the heap, the memory space where objects are stored.

**break**
break statement is used to break loop or switch statement.

It breaks the current flow of the program at specified condition. 

We can use Java break statement in all types of loops such as for loop, while loop and do-while loop.

public class BreakExample {  
	public static void main(String[] args) {  
      
    	for(int i=1;i<=10;i++){  
           if(i==5){    
              break;  
            }  
          System.out.println(i);  
       }  
   }  
}

ouput : 1234

**continue**
The continue keyword is used to end the current iteration in a for loop (or a while loop), and continues to the next iteration.

public class ContinueExample {
public static void main(String[] args) {
        for(int i=1;i<=10;i++){
    	if(i==5){
    		continue;    	}
    	System.out.println(i);
    }
}
}
output: 1234678910

**this**
this keyword is a reference variable that refers to the current object.

Whenever the name of instance and local variable both are same then our jvm gets confused that which one is local variable and which one is instance variacle, to avoid this problem we should use this keyword. 

The this keyword can be used to refer current class instance variable.
for example 
class A{
  int a;  //instance variable 
  A(int a){  //local variable
     this.a = a;    
  }
}

this can also be used to:

Invoke current class constructor
Invoke current class method
Return the current class object
Pass an argument in the method call
Pass an argument in the constructor call


**static** 

static keyword is used for memory management mainly.

We can apply static keyword with variables, methods, blocks and nested classes.

The static can be:
-Variable (also known as a class variable)
-Method (also known as a class method)
-Block
-Nested class

1. Static variable

If you declare any variable as static, it is known as a static variable.

-The static variable can be used to refer to the common property of all objects

-for example college name of students, etc.

-The static variable gets memory only once in the class area at the time of class loading.

-Advantages : it saves memory

!lets Understanding the problem without static variable. 

Suppose there are 500 students in my college, now all instance data members will get memory each time when the object is created. All students have its unique rollno and name, so instance data member is good in such case. Here, "college" refers to the common property of all objects. If we make it static, this field will get the memory only once.

Java static property is shared to all objects.

example : 

class Student{  
   int rollno;//instance variable  
   String name;  
   static String college ="ITS";  
    
   Student(int r, String n){  
   rollno = r;  
   name = n;  
   }  
   void display (){System.out.println(rollno+" "+name+" "+college);}  
}  

public class TestStaticVariable1
{  
 public static void main(String args[])
 {  
 Student s1 = new Student(111,"Karan");  
 Student s2 = new Student(222,"Aryan");  
  
 s1.display();  
 s2.display();  
 }  
}  

2.static method

If you apply static keyword with any method, it is known as static method.

A static method can be invoked without the need for creating an instance of a class.

A static method can access static data member and can change the value of it.

Restrictions for the static method : 
The static method can not use non static data member or call non-static method directly.
this and super cannot be used in static context.

3. static block

Is used to initialize the static data member.

It is executed before the main method at the time of classloading.

Example of static block : 

class A2{  
  static{System.out.println("static block is invoked");}  
  public static void main(String args[]){  
   System.out.println("Hello main");  
  }  
}  


**final**

Final means cannot be change or it is final (fix). 

It is a same us constant in c++. 

We can use final keyword in java with variable, class, method. 

1. Final variable:

When we declare variable as final then we cannot change the value of variable.. 

Example:
Final float pi=3.14;

2.Final class: 

If we declare class with final keyword then this class canâ€™t be inherit. 

it will give compile time error.

3.Final Method:

When we declare method as final then we cannot overwrite this method in subclass. 

**super**

super keyword is a reference variable which is used to refer immediate parent class object.

Usage of Java super Keyword: 

super can be used to refer immediate parent class instance variable , class method , class constructor.


**finalize**

Finalize() is the method of Object class.

This method is called just before an object is garbage collected.


**abstract**

The abstract keyword is used to achieve abstraction in Java.

The method which is declared with abstract keyword and doesn't have any implementation is known as an abstract method.

**throw**

The "throw" keyword is used to throw an exception.

syntax: throw new exception_name("error message"); 

public class Main {
  static void checkAge(int age) {
    if (age < 18) {
      throw new ArithmeticException("Access denied - You must be at least 18 years old.");
    }
    else {
      System.out.println("Access granted - You are old enough!");
    }
  }

  public static void main(String[] args) {
    checkAge(15); // Set age to 15 (which is below 18...)
  }
}
 

**throws**

The "throws" keyword is used to declare exceptions. It specifies that there may occur an exception in the method. It doesn't throw an exception. It is always used with method signature.

syntax: 
return_type method_name() throws exception_name{  
//method code  
} 

public class Main {
  static void checkAge(int age) throws ArithmeticException {
    if (age < 18) {
      throw new ArithmeticException("Access denied - You must be at least 18 years old.");
    }
    else {
      System.out.println("Access granted - You are old enough!");
    }
  }

  public static void main(String[] args) {
    checkAge(15); // Set age to 15 (which is below 18...)
  }
} 
